{
  "openapi": "3.0.0",
  "info": {
    "description": "This is the API for the Open Integration Hub Microservice \"Tagging Service\"\n[http://openintegrationhub.org](http://openintegrationhub.org)\n",
    "version": "0.0.1",
    "title": "Tagging Service",
    "termsOfService": "http://openintegrationhub.org/terms/",
    "contact": {
      "email": "james.weber@cloudecosystem.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "tagging",
      "description": "Tagging Service"
    }
  ],
  "paths": {
    "/tags/{tagsGroupSlug}": {
      "parameters": [
        {
          "in": "path",
          "name": "tagsGroupSlug",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "x-swagger-router-controller": "tags",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "tagging"
        ],
        "summary": "Get all tags by tagsGroupId",
        "description": "This requires the 'tagging.read' permissions. You get all tags filter by tagsGroup,owner or a system tag",
        "operationId": "getTagsByTagsGroup",
        "responses": {
          "200": {
            "description": "The tags from the tagsGroup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tag"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No slug found"
          }
        }
      },
      "post": {
        "x-swagger-router-controller": "tags",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "tagging"
        ],
        "summary": "Create a new tag for a tagsGroup",
        "description": "This requires the 'tagging.write' permissions. Creates a new tag for a specific tagsGroup.",
        "operationId": "createNewTag",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "tagsGroupSlug",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "The tag created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Tag"
                    },
                    "meta": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error creating the new tag"
          },
          "404": {
            "description": "No slug found"
          },
          "500": {
            "description": "Error found saving in database"
          }
        }
      }
    },
    "/tags/{tagsGroupSlug}/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "tagsGroupSlug",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "patch": {
        "x-swagger-router-controller": "tags",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "tagging"
        ],
        "summary": "Update fields from existent tag",
        "description": "This requires the 'tagging.write' permissions. Update the required fields of a tag.",
        "operationId": "patchTag",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The tag created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Tag"
                    },
                    "meta": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid id"
          },
          "404": {
            "description": "No slug found"
          },
          "500": {
            "description": "Error found saving in database"
          }
        }
      },
      "delete": {
        "x-swagger-router-controller": "tags",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "tagging"
        ],
        "summary": "Delete an existent tag",
        "description": "This requires the 'tagging.write' permissions. Delete the required tag.",
        "operationId": "deleteTag",
        "responses": {
          "200": {
            "description": "Deletion successful"
          },
          "400": {
            "description": "Invalid id"
          },
          "404": {
            "description": "No tag found"
          },
          "500": {
            "description": "Error found saving in database"
          }
        }
      }
    },
    "/tags/{tagsGroupSlug}/taggedObjects": {
      "parameters": [
        {
          "in": "path",
          "name": "tagsGroupSlug",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "x-swagger-router-controller": "tags",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "tagging"
        ],
        "summary": "Get all tags ids grouping by objectId",
        "description": "This requires the 'tagging.read' permissions. You get all tagsIds of each object",
        "operationId": "getTaggedObjectsByTag",
        "parameters": [
          {
            "in": "query",
            "name": "objectId",
            "schema": {
              "type": "string"
            },
            "description": "This query field is for filtering by objectId"
          }
        ],
        "responses": {
          "200": {
            "description": "The tagsIds of each objectId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TaggedObjectResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No slug found"
          }
        }
      },
      "post": {
        "x-swagger-router-controller": "tags",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "tagging"
        ],
        "summary": "Create/update tagged objects for different tags",
        "description": "This requires the 'tagging.write' permissions. Create or update tagged objects for specific tags.",
        "operationId": "upsertTaggedObjects",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaggedObjectResponse"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upserted objects ids",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/UpserTaggedObjectResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Not all tagsIds are valid"
          },
          "404": {
            "description": "No tag found"
          },
          "500": {
            "description": "Error found saving in database"
          }
        }
      }
    },
    "/healthcheck": {
      "get": {
        "x-swagger-router-controller": "healthcheck",
        "security": [],
        "tags": [
          "healthcheck"
        ],
        "summary": "Performs a healthcheck",
        "description": "This will return 200 and a JSON object with relevant status information when the service is running and healthy.",
        "responses": {
          "200": {
            "description": "An object detailing the status of the service and the involved components.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "pass"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "MongoDB": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "example": "pass"
                            }
                          }
                        },
                        "queue": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "example": "pass"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "At least one component is unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "MongoDB": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "example": "fail"
                            }
                          }
                        },
                        "queue": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string",
                              "example": "pass"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about the Tagging  Service",
    "url": "https://github.com/openintegrationhub/CE-tagging-service"
  },
  "servers": [
    {
      "url": "http://localhost:3001/"
    }
  ],
  "components": {
    "requestBodies": {
      "addTenantToFlow": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "tenantId": {
                  "description": "ID of the tenant",
                  "type": "string",
                  "format": "string"
                }
              }
            }
          }
        }
      },
      "addEdge": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "mapper_type": {
                  "description": "mapper type of the edge",
                  "type": "string",
                  "format": "string"
                },
                "condition": {
                  "description": "condition of the edge",
                  "type": "string",
                  "format": "string"
                },
                "mapper_to": {
                  "description": "where the edge leads to",
                  "type": "string",
                  "format": "string"
                },
                "mapper_subject": {
                  "description": "name of the mapper",
                  "type": "string"
                },
                "mapper_textbody": {
                  "description": "Mapper details like Adress. Street",
                  "type": "string"
                },
                "source": {
                  "description": "Name of the edge's source",
                  "type": "string"
                },
                "target": {
                  "description": "Name of the edge's target",
                  "type": "string"
                }
              },
              "required": [
                "mapper_type",
                "condition"
              ]
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "description": "Enter the bearer token received by IAM"
      }
    },
    "schemas": {
      "TagsGroup": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "name",
              "slug"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string",
                "maxLength": 50
              },
              "slug": {
                "type": "string",
                "maxLength": 30
              },
              "level": {
                "type": "string",
                "enum": [
                  "system-level",
                  "tenant-level"
                ],
                "example": "system-level"
              },
              "type": {
                "type": "string",
                "enum": [
                  "simple",
                  "rich"
                ],
                "example": "simple"
              },
              "createdAt": {
                "type": "string",
                "description": "Timestamp of tagsGroup creation",
                "format": "date-time",
                "example": "2019-07-30T12:52:45.957Z"
              },
              "updatedAt": {
                "type": "string",
                "description": "Timestamp of most recent tagsGroup update",
                "format": "date-time",
                "example": "2019-07-30T12:52:45.957Z"
              }
            }
          }
        ]
      },
      "Tag": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "name",
              "tagsGroupId"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string",
                "maxLength": 50
              },
              "description": {
                "type": "string",
                "maxLength": 300
              },
              "logo": {
                "type": "string"
              },
              "owners": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Owner"
                }
              },
              "isSystemTag": {
                "type": "boolean",
                "description": "This field could be use to define system tags and allow all users to get them"
              },
              "taggedObjectsCount": {
                "type": "number"
              },
              "createdAt": {
                "type": "string",
                "description": "Timestamp of tag creation",
                "format": "date-time",
                "example": "2019-07-30T12:52:45.957Z"
              },
              "updatedAt": {
                "type": "string",
                "description": "Timestamp of most recent tag update",
                "format": "date-time",
                "example": "2019-07-30T12:52:45.957Z"
              }
            }
          }
        ]
      },
      "TaggedObject": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "tagId",
              "objectId",
              "tagsGroupId"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "tagId": {
                "type": "string",
                "description": "Id from Tag schema"
              },
              "objectId": {
                "type": "string",
                "description": "Id for the object that you want to tag. (templates, components...)"
              },
              "tagsGroupId": {
                "type": "string",
                "description": "Id from TagsGroup schema"
              }
            }
          }
        ]
      },
      "Meta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page (1-based numbering)"
          },
          "perPage": {
            "type": "integer",
            "description": "Number of objects per page"
          },
          "total": {
            "type": "integer",
            "description": "Total number of objects"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages"
          }
        }
      },
      "Owner": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "External id of the owner"
          },
          "type": {
            "type": "string",
            "description": "Type to discriminate between user or tenant"
          }
        }
      },
      "TaggedObjectResponse": {
        "type": "object",
        "properties": {
          "tagsIds": {
            "type": "string",
            "description": "Tags ids"
          },
          "objectId": {
            "type": "string",
            "description": "Object id"
          }
        }
      },
      "UpserTaggedObjectResponse": {
        "type": "object",
        "properties": {
          "processed": {
            "type": "number",
            "description": "Number of upserted tagged objects"
          }
        }
      }
    }
  }
}